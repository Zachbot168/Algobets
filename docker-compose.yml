version: '3.8'

services:
  # PostgreSQL database for Airflow metadata
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - valorant_net

  # Redis for Airflow Celery executor
  redis:
    image: redis:7.2-alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - valorant_net

  # Airflow base service with common configuration
  airflow-common: &airflow-common
    build:
      context: .
      dockerfile: infra/Dockerfile.airflow
    environment: &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./orchestration/dags:/opt/airflow/dags
      - ./orchestration/logs:/opt/airflow/logs
      - ./orchestration/config:/opt/airflow/config
      - ./orchestration/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./.env:/opt/airflow/.env
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on: &airflow-common-depends-on
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - valorant_net

  # Airflow webserver
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow celery worker
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || exit 1'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow triggerer
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo "AIRFLOW_UID not set, using default"
          export AIRFLOW_UID=50000
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
        airflow db init
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    user: "0:0"
    volumes:
      - ./orchestration:/sources

  # MLflow tracking server
  mlflow:
    build:
      context: .
      dockerfile: infra/Dockerfile.mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=./artifacts
    volumes:
      - mlflow_db_volume:/mlflow
      - ./models/artifacts:/mlflow/artifacts
    restart: always
    networks:
      - valorant_net

  # FastAPI prediction service
  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - mlflow
    restart: always
    networks:
      - valorant_net

  # Streamlit GUI
  gui:
    build:
      context: .
      dockerfile: infra/Dockerfile.gui
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./gui:/app/gui
      - ./data:/app/data
    depends_on:
      - api
    restart: always
    networks:
      - valorant_net

  # Data ingestion service (optional - can run as cron)
  ingest:
    build:
      context: .
      dockerfile: infra/Dockerfile.ingest
    environment:
      - SCHEDULE_ENABLED=false  # Set to true for continuous ingestion
    env_file:
      - .env
    volumes:
      - ./ingest:/app/ingest
      - ./data:/app/data
    depends_on:
      - postgres
    restart: "no"  # Run manually or via cron
    networks:
      - valorant_net

volumes:
  postgres_db_volume:
  mlflow_db_volume:

networks:
  valorant_net:
    driver: bridge